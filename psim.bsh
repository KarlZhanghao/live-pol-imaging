import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.process.ImageProcessor;
import ij.process.ImageConverter;
import ij.process.ColorProcessor;
import ij.process.FloatProcessor;
import ij.plugin.ImageCalculator;
import ij.plugin.ZProjector;
import java.awt.Color;
import java.util.stream.IntStream;

/** Params */
// calibration images
calibPath = "C:/Users/kaelz/Desktop/mm/fakecamera/calib/";
// Polarization angles
polAng = new double[]{-0.8183, -1.8555, -2.8909};

/** Acquisition Data */
// Initialize data storage
store = mm.data().createRAMDatastore();
// loop data
ImagePlus[] impList = new ImagePlus[3];
ImageCalculator ic = new ImageCalculator();
for (int z = 0; z < 3; z++) {
    ImagePlus impave = null;
    // loop si phases
    for (int i = 0; i < 3; i++) {
        // Set focus  
        mmc.setPosition(z*3+i); //mmc.getPosition()
        // Acquire image
        imgList = mm.acquisitions().snap();
        // construct imp and ip
        img = imgList.get(0);
        ip = mm.data().ij().createProcessor(img);   //imp = new ImagePlus("Image", ip);
        imp = new ImagePlus("AveImageZ", ip);
        ImageConverter icv = new ImageConverter(imp);
        icv.convertToGray32();
        if (impave == null) {
            impave = imp;
        } else {
            impave = ic.run("Add create", impave, imp);
        }
    }
    // calibrate
    if (z>0) {
        calibfile = calibPath + "calib" + z + ".tif";
        calibimp = IJ.openImage(calibfile);
        ImageConverter icv = new ImageConverter(calibimp);
        icv.convertToGray32();
        calibip = calibimp.getProcessor();
        calibip.multiply(0.0001);
        //impave = ic.run("Divide create", impave, calibimp);
    }
    impList[z] = impave;
}
// display impList
ImageStack stack = new ImageStack(impList[0].getWidth(), impList[0].getHeight());
for (int i = 0; i < impList.length; i++) {
    stack.addSlice(impList[i].getProcessor());
}
ImagePlus impStack = new ImagePlus("LD Images", stack);
impStack.show();

/** Process Images */
// diaplay color wheel
cmimp = IJ.openImage(calibPath + "cm.png");
cmimp.show();
// cal constant
Acos23 = (Math.cos(polAng[1]) - Math.cos(polAng[2]));
Acos12 = (Math.cos(polAng[0]) - Math.cos(polAng[1]));
Acos31 = (Math.cos(polAng[2]) - Math.cos(polAng[0]));
Asin23 = (Math.sin(polAng[1]) - Math.sin(polAng[2]));
Asin12 = (Math.sin(polAng[0]) - Math.sin(polAng[1]));
Asin31 = (Math.sin(polAng[2]) - Math.sin(polAng[0]));
//
float[][] hsvpixel = new float[3][impList[0].getWidth()*impList[0].getHeight()];
int[] rgbpixel = new int[impList[0].getWidth()*impList[0].getHeight()];
// loop
//IntStream.range(0, impList[0].getWidth()).parallel().forEach(y -> {
for (int pp = 0; pp < impList[0].getWidth()*impList[0].getHeight(); pp++) {      
        I1 = impList[0].getProcessor().getf(pp);
        I2 = impList[1].getProcessor().getf(pp);
        I3 = impList[2].getProcessor().getf(pp);
        // cal Asin
        Asin = (Acos23*(I1-I2)-Acos12*(I2-I3))/(Acos23*Asin12-Acos12*Asin23)+
            (Acos31*(I2-I3)-Acos23*(I3-I1))/(Acos31*Asin23-Acos23*Asin31)+
            (Acos12*(I3-I1)-Acos31*(I1-I2))/(Acos12*Asin31-Acos31*Asin12);
        Asin = Asin/3.0;
        // cal Acos
        Acos = (Asin23*(I1-I2)-Asin12*(I2-I3))/(Asin23*Acos12-Asin12*Acos23)+
            (Asin31*(I2-I3)-Asin23*(I3-I1))/(Asin31*Acos23-Asin23*Acos31)+
            (Asin12*(I3-I1)-Asin31*(I1-I2))/(Asin12*Acos31-Asin31*Acos12);
        Acos = Acos/3.0;
        // cal A
        A = Math.sqrt(Asin * Asin + Acos * Acos);
        // cal B
        B = ((I1+I2+I3)-1.5*A)/3;
        // cal angle
        angle = Math.atan2(Asin, Acos);
        // cal color
        h = (angle+Math.PI/2)%2*Math.PI / (2*Math.PI);
        s = 0.6;
        v = A/255.;
        // set hsvpixel
        hsvpixel[0][pp] = (float)h;
        hsvpixel[1][pp] = (float)s;
        hsvpixel[2][pp] = (float)v; 
        // get rgb color
        rgbpixel[pp] = Color.HSBtoRGB((float)h, (float)s, (float)v);
};
// hsvpixels to imageplus
ImageStack hsvStack = new ImageStack(impList[0].getWidth(), impList[0].getHeight());
for (int i = 0; i < 3; i++) {
    ImageProcessor ip = new FloatProcessor(impList[0].getWidth(), impList[0].getHeight(), hsvpixel[i]);
    hsvStack.addSlice(ip);
}
ImagePlus impHSV = new ImagePlus("HSV", hsvStack);  
//impHSV.show();
// rgb image
ColorProcessor cp = new ColorProcessor(impList[0].getWidth(), impList[0].getHeight(), rgbpixel);
ImagePlus impRGB = new ImagePlus("Polarization Result", cp);
impRGB.show();